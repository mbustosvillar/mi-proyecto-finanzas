import pandas as pd
import numpy as np
import scipy.optimize as sco
from config import TICKERS  # Aseg√∫rate de importar los tickers definidos en config.py

def optimize_portfolio(file="data/market_data.csv"):
    # 1Ô∏è‚É£ Cargar datos y eliminar columnas vac√≠as
    data = pd.read_csv(file, index_col=0, parse_dates=True).dropna(how="all", axis=1)
    
    # 2Ô∏è‚É£ Ver qu√© columnas hay realmente en el dataset
    print("üîç Columnas originales del DataFrame:", data.columns)

    # 3Ô∏è‚É£ Filtrar los tickers que realmente est√°n en los datos
    valid_tickers = [ticker for ticker in TICKERS if ticker in data.columns]
    
    if len(valid_tickers) == 0:
        print("‚ùå No hay activos v√°lidos para optimizar.")
        return {}

    print("‚úÖ Activos v√°lidos para optimizaci√≥n:", valid_tickers)

    # 4Ô∏è‚É£ Calcular retornos y eliminar filas con NaN
    returns = data[valid_tickers].pct_change().dropna()
    cov_matrix = returns.cov() * 252  # Convertir a varianza anualizada

    # 5Ô∏è‚É£ Asegurar que no haya NaNs en la matriz de covarianza
    if cov_matrix.isnull().values.any():
        print("‚ö†Ô∏è Hay NaNs en la matriz de covarianza. Revisa los datos.")
        return {}

    # 6Ô∏è‚É£ Definir n√∫mero de activos y pesos iniciales
    num_assets = len(valid_tickers)
    initial_weights = np.array([1.0 / num_assets] * num_assets)

    print("üî¢ N√∫mero de activos optimizados:", num_assets)
    print("üîπ Dimensi√≥n de cov_matrix:", cov_matrix.shape)
    print("üîπ Dimensi√≥n de initial_weights:", initial_weights.shape)

    # 7Ô∏è‚É£ Funci√≥n objetivo: minimizar la volatilidad del portafolio
    def portfolio_volatility(weights):
        return np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))

    # 8Ô∏è‚É£ Restricciones y l√≠mites
    constraints = {"type": "eq", "fun": lambda x: np.sum(x) - 1}  # La suma de pesos debe ser 1
    bounds = [(0, 1) for _ in range(num_assets)]  # Pesos entre 0% y 100%

    # 9Ô∏è‚É£ Optimizaci√≥n
    optimal = sco.minimize(
        portfolio_volatility,
        initial_weights,
        method="SLSQP",
        bounds=bounds,
        constraints=constraints
    )

    # üîü Verificar si la optimizaci√≥n fue exitosa
    if not optimal.success:
        print("‚ùå La optimizaci√≥n fall√≥:", optimal.message)
        return {}

    # üî• Retornar los pesos optimizados
    return dict(zip(valid_tickers, optimal.x))

# üîç Test de depuraci√≥n local
if __name__ == "__main__":
    optimized_weights = optimize_portfolio()
    print("‚úÖ Pesos √≥ptimos del portafolio:", optimized_weights)
